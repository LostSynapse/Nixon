// web/src/components/Modals.jsx
import React, { useState } from 'react';
import { X } from 'lucide-react';

export const Modal = ({ children, onClose, title, footerContent }) => (
    <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4" onClick={onClose}><div className="bg-gray-800 rounded-lg shadow-2xl w-full max-w-2xl max-h-[90vh] flex flex-col border border-gray-700" onClick={e => e.stopPropagation()}><div className="flex justify-between items-center p-4 border-b border-gray-700 sticky top-0 bg-gray-800 z-10"><h3 className="text-xl font-bold text-gray-100">{title}</h3><button onClick={onClose} className="text-gray-500 hover:text-white" aria-label="Close modal"><X size={24} /></button></div><div className="p-6 overflow-y-auto space-y-6 flex-grow">{children}</div>{footerContent && (<div className="flex justify-end p-4 border-t border-gray-700 sticky bottom-0 bg-gray-800 z-10 space-x-3">{footerContent}</div>)}</div></div>);

export const ConfirmationModal = ({ title, message, confirmText = "Confirm", cancelText = "Cancel", onConfirm, onCancel }) => (<Modal onClose={onCancel} title={title} footerContent={(<><button onClick={onCancel} className="px-4 py-2 rounded-lg bg-gray-600 hover:bg-gray-500 font-semibold text-white">{cancelText}</button><button onClick={onConfirm} className="px-4 py-2 rounded-lg bg-red-600 hover:bg-red-700 font-semibold text-white">{confirmText}</button></>)}><p className="text-gray-300">{message}</p></Modal>);

export const EditModal = ({ recording, onSave, onCancel }) => {
    const [name, setName] = useState(recording?.Name || recording?.Filename || '');
    const [notes, setNotes] = useState(recording?.Notes || '');
    const [genre, setGenre] = useState(recording?.Genre || '');
    const handleSave = () => { onSave({ ...recording, Name: name, Notes: notes, Genre: genre }); };
    return (<Modal onClose={onCancel} title="Edit Recording" footerContent={(<><button onClick={onCancel} className="px-4 py-2 rounded-lg bg-gray-600 hover:bg-gray-500 font-semibold">Cancel</button><button onClick={handleSave} className="px-4 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 font-semibold text-white">Save Changes</button></>)}><div className="space-y-4"><div><label htmlFor="edit_rec_name" className="block text-sm font-medium text-gray-300 mb-1">Name</label><input id="edit_rec_name" type="text" value={name} onChange={e => setName(e.target.value)} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm" /></div><div><label htmlFor="edit_rec_notes" className="block text-sm font-medium text-gray-300 mb-1">Notes</label><textarea id="edit_rec_notes" value={notes} onChange={e => setNotes(e.target.value)} rows="3" className="form-textarea block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"></textarea></div><div><label htmlFor="edit_rec_genre" className="block text-sm font-medium text-gray-300 mb-1">Genre</label><input id="edit_rec_genre" type="text" value={genre} onChange={e => setGenre(e.target.value)} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm" /></div></div></Modal>);};

export const SettingsModal = ({ fullConfig, audioCaps, onConfigChange, onSave, onCancel, onFetchCaps }) => {
    const [activeTab, setActiveTab] = useState('audio');
    if (!fullConfig) { return <Modal onClose={onCancel} title="Settings"><p className="text-gray-400">Loading settings...</p></Modal>; }
    const TabButton = ({ tabName, label }) => (<button onClick={() => setActiveTab(tabName)} className={`px-3 py-2 text-sm font-medium transition-colors rounded-t-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-800 ${activeTab === tabName ? 'text-white bg-gray-700' : 'text-gray-400 hover:text-gray-200 hover:bg-gray-700/50'}`}>{label}</button>);
    const masterChannelsString = Array.isArray(fullConfig.audio_settings?.master_channels) ? fullConfig.audio_settings.master_channels.join(',') : '';
    const settingsFooter = (<><button onClick={onCancel} className="px-6 py-2 rounded-lg bg-gray-600 hover:bg-gray-500 font-semibold text-white">Cancel</button><button onClick={onSave} className="px-6 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 font-semibold text-white">Save Settings</button></>);

    return (<Modal onClose={onCancel} title="Settings" footerContent={settingsFooter}><div className="border-b border-gray-700 mb-6 flex space-x-1 sticky top-0 bg-gray-800 pt-1 -mt-1 z-10"><TabButton tabName="audio" label="Audio" /><TabButton tabName="auto_record" label="Auto-Record" /><TabButton tabName="srt" label="SRT" /><TabButton tabName="icecast" label="Icecast" /><TabButton tabName="network" label="Network" /></div>
      {activeTab === 'audio' && (<div className="space-y-5"><div><label htmlFor="audio_device" className="block text-sm font-medium text-gray-300 mb-1">Audio Device</label><div className="flex space-x-2 items-center"><select id="audio_device" name="audio_settings.device" value={fullConfig.audio_settings?.device || ''} onChange={onConfigChange} className="form-select block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm"><option value="">Select...</option><option value="default">Default</option></select><button type="button" onClick={() => onFetchCaps(fullConfig.audio_settings?.device)} disabled={!fullConfig.audio_settings?.device || fullConfig.audio_settings?.device === "default"} className="px-3 py-2 bg-gray-600 hover:bg-gray-500 rounded-lg text-sm font-medium text-gray-200 disabled:opacity-50 disabled:cursor-not-allowed" title="Scan device capabilities">Scan</button></div><p className="mt-1 text-xs text-gray-500">Use <code className="bg-gray-900 px-1 rounded text-gray-400">pw-dump Node</code> to find device paths/names.</p></div><div className="grid grid-cols-1 sm:grid-cols-2 gap-4"><div><label htmlFor="sample_rate" className="block text-sm font-medium text-gray-300 mb-1">Sample Rate</label><select id="sample_rate" name="audio_settings.sample_rate" data-type="int" value={fullConfig.audio_settings?.sample_rate ?? 48000} onChange={onConfigChange} className="form-select block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm"><option value="44100">44100 Hz</option><option value="48000">48000 Hz</option><option value="96000">96000 Hz</option>{[...new Set(audioCaps?.rates?.map(r=>parseInt(r,10)).filter(r=>!isNaN(r)))].sort((a,b)=>a-b).map(r=>(![44100,48000,96000].includes(r)&&<option key={r} value={r}>{r} Hz (Scanned)</option>))}</select></div><div><label htmlFor="bit_depth" className="block text-sm font-medium text-gray-300 mb-1">Bit Depth</label><select id="bit_depth" name="audio_settings.bit_depth" data-type="int" value={fullConfig.audio_settings?.bit_depth ?? 24} onChange={onConfigChange} className="form-select block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm"><option value="16">16-bit</option><option value="24">24-bit</option><option value="32">32-bit</option>{[...new Set(audioCaps?.depths?.map(d=>parseInt(d,10)).filter(d=>!isNaN(d)))].sort((a,b)=>a-b).map(d=>(![16,24,32].includes(d)&&<option key={d} value={d}>{d}-bit (Scanned)</option>))}</select></div></div><div><label htmlFor="master_channels" className="block text-sm font-medium text-gray-300 mb-1">Master Channels (Comma-separated)</label><input id="master_channels" type="text" name="audio_settings.master_channels" data-type="int_array" value={masterChannelsString} onChange={onConfigChange} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm" placeholder="e.g., 1,2"/><p className="mt-1 text-xs text-gray-500">Input channels (1-based). '1,2' = stereo pair.</p></div></div>)}
      {activeTab === 'auto_record' && (<div className="space-y-5"><label className="flex items-center space-x-3 cursor-pointer p-2 rounded-md hover:bg-gray-700/50"><input type="checkbox" name="auto_record.enabled" checked={!!fullConfig.auto_record?.enabled} onChange={onConfigChange} className="form-checkbox h-5 w-5 rounded text-blue-500 bg-gray-700 border-gray-600 focus:ring-blue-500 focus:ring-offset-gray-800"/><span className="text-gray-200 font-medium">Enable Auto-Record (VAD)</span></label><hr className="border-gray-600"/><div><label htmlFor="vad_db_threshold" className="block text-sm font-medium text-gray-300 mb-1">VAD Trigger Level (dB)</label><input id="vad_db_threshold" type="number" name="auto_record.vad_db_threshold" data-type="float" value={fullConfig.auto_record?.vad_db_threshold ?? -50.0} onChange={onConfigChange} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm" step="0.1"/><p className="mt-1 text-xs text-gray-500">Audio <span className="font-semibold">above</span> this level is voice.</p></div><div><label htmlFor="rec_dir" className="block text-sm font-medium text-gray-300 mb-1">Recording Directory</label><input id="rec_dir" type="text" name="auto_record.directory" value={fullConfig.auto_record?.directory || './recordings'} onChange={onConfigChange} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm" placeholder="./recordings"/><p className="mt-1 text-xs text-gray-500">Relative to server executable.</p></div><div className="grid grid-cols-1 sm:grid-cols-2 gap-4"><div><label htmlFor="preroll" className="block text-sm font-medium text-gray-300 mb-1">Pre-roll (sec)</label><input id="preroll" type="number" name="auto_record.preroll_duration" data-type="int" value={fullConfig.auto_record?.preroll_duration ?? 15} onChange={onConfigChange} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm" min="0"/><p className="mt-1 text-xs text-gray-500">Buffer before VAD trigger.</p></div><div><label htmlFor="silence_timeout" className="block text-sm font-medium text-gray-300 mb-1">Silence Timeout (sec)</label><input id="silence_timeout" type="number" name="auto_record.smart_split_timeout" data-type="int" value={fullConfig.auto_record?.smart_split_timeout ?? 10} onChange={onConfigChange} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm" min="1"/><p className="mt-1 text-xs text-gray-500">Duration before action.</p></div></div><label className="flex items-center space-x-3 cursor-pointer p-2 rounded-md hover:bg-gray-700/50"><input type="checkbox" name="auto_record.smart_split_enabled" checked={!!fullConfig.auto_record?.smart_split_enabled} onChange={onConfigChange} className="form-checkbox h-5 w-5 rounded text-blue-500 bg-gray-700 border-gray-600 focus:ring-blue-500 focus:ring-offset-gray-800"/><span className="text-gray-200 font-medium">Enable Smart-Split</span></label><p className="text-xs text-gray-500 -mt-2 ml-10">If enabled, starts new file after silence. If disabled, stops recording.</p></div>)}
      {activeTab === 'srt' && (<div className="space-y-5"><label className="flex items-center space-x-3 cursor-pointer p-2 rounded-md hover:bg-gray-700/50"><input type="checkbox" name="srt_settings.srt_enabled" checked={!!fullConfig.srt_settings?.srt_enabled} onChange={onConfigChange} className="form-checkbox h-5 w-5 rounded text-blue-500 bg-gray-700 border-gray-600 focus:ring-blue-500 focus:ring-offset-gray-800"/><span className="text-gray-200 font-medium">Enable SRT Stream</span></label><hr className="border-gray-600"/><div className="grid grid-cols-1 sm:grid-cols-2 gap-4"><div><label htmlFor="srt_host" className="block text-sm font-medium text-gray-300 mb-1">SRT Host/IP</label><input id="srt_host" type="text" name="srt_settings.srt_host" value={fullConfig.srt_settings?.srt_host || '127.0.0.1'} onChange={onConfigChange} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm"/><p className="mt-1 text-xs text-gray-500">Destination address.</p></div><div><label htmlFor="srt_port" className="block text-sm font-medium text-gray-300 mb-1">SRT Port</label><input id="srt_port" type="number" name="srt_settings.srt_port" data-type="int" value={fullConfig.srt_settings?.srt_port ?? 9000} onChange={onConfigChange} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm" min="1" max="65535"/><p className="mt-1 text-xs text-gray-500">Destination port.</p></div></div><div><label htmlFor="srt_bitrate" className="block text-sm font-medium text-gray-300 mb-1">Bitrate (Opus)</label><select id="srt_bitrate" name="srt_settings.srt_bitrate" data-type="int" value={fullConfig.srt_settings?.srt_bitrate || 128000} onChange={onConfigChange} className="form-select block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm"><option value="64000">64 kbps</option><option value="96000">96 kbps</option><option value="128000">128 kbps</option><option value="192000">192 kbps</option><option value="256000">256 kbps</option></select></div><p className="text-xs text-gray-500">Ensure SRT listener is running.</p></div>)}
      {activeTab === 'icecast' && (<div className="space-y-5"><label className="flex items-center space-x-3 cursor-pointer p-2 rounded-md hover:bg-gray-700/50"><input type="checkbox" name="icecast_settings.icecast_enabled" checked={!!fullConfig.icecast_settings?.icecast_enabled} onChange={onConfigChange} className="form-checkbox h-5 w-5 rounded text-blue-500 bg-gray-700 border-gray-600 focus:ring-blue-500 focus:ring-offset-gray-800"/><span className="text-gray-200 font-medium">Enable Icecast Stream</span></label><hr className="border-gray-600"/><div className="grid grid-cols-1 sm:grid-cols-2 gap-4"><div><label htmlFor="ice_host" className="block text-sm font-medium text-gray-300 mb-1">Icecast Host/IP</label><input id="ice_host" type="text" name="icecast_settings.icecast_host" value={fullConfig.icecast_settings?.icecast_host || '127.0.0.1'} onChange={onConfigChange} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm"/></div><div><label htmlFor="ice_port" className="block text-sm font-medium text-gray-300 mb-1">Icecast Port</label><input id="ice_port" type="number" name="icecast_settings.icecast_port" data-type="int" value={fullConfig.icecast_settings?.icecast_port ?? 8000} onChange={onConfigChange} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm" min="1" max="65535"/></div></div><div className="grid grid-cols-1 sm:grid-cols-2 gap-4"><div><label htmlFor="ice_mount" className="block text-sm font-medium text-gray-300 mb-1">Mount Point</label><input id="ice_mount" type="text" name="icecast_settings.icecast_mount" value={fullConfig.icecast_settings?.icecast_mount || '/stream'} onChange={onConfigChange} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm"/><p className="mt-1 text-xs text-gray-500">e.g., /live</p></div><div><label htmlFor="ice_pass" className="block text-sm font-medium text-gray-300 mb-1">Source Password</label><input id="ice_pass" type="password" name="icecast_settings.icecast_password" value={fullConfig.icecast_settings?.icecast_password || 'hackme'} onChange={onConfigChange} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm"/></div></div><div><label htmlFor="ice_bitrate" className="block text-sm font-medium text-gray-300 mb-1">Bitrate (MP3)</label><select id="ice_bitrate" name="icecast_settings.icecast_bitrate" data-type="int" value={fullConfig.icecast_settings?.icecast_bitrate || 192000} onChange={onConfigChange} className="form-select block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm"><option value="128000">128 kbps</option><option value="192000">192 kbps</option><option value="256000">256 kbps</option><option value="320000">320 kbps</option></select></div></div>)}
      {activeTab === 'network' && (<div className="space-y-5"><h4 className="text-lg font-semibold text-gray-200 border-b border-gray-600 pb-2">WebRTC (Future)</h4><div><label htmlFor="signal_url" className="block text-sm font-medium text-gray-300 mb-1">Signaling Server URL</label><input id="signal_url" type="url" name="network_settings.signaling_url" value={fullConfig.network_settings?.signaling_url || ''} onChange={onConfigChange} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm" placeholder="wss://..."/><p className="mt-1 text-xs text-gray-500">For P2P setup.</p></div><div><label htmlFor="stun_url" className="block text-sm font-medium text-gray-300 mb-1">STUN Server URL</label><input id="stun_url" type="text" name="network_settings.stun_url" value={fullConfig.network_settings?.stun_url || 'stun:stun.l.google.com:19302'} onChange={onConfigChange} className="form-input block w-full bg-gray-700 border-gray-600 rounded-lg shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 sm:text-sm" placeholder="stun:..."/><p className="mt-1 text-xs text-gray-500">Helps with NAT traversal.</p></div></div>)}
    </Modal>);
};

